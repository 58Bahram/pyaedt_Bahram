
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\EDB_in_3DLayout.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_EDB_in_3DLayout.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_EDB_in_3DLayout.py:


HFSS3DLayout  Analysis
--------------------------------------------
This Example shows how to use HFSS3DLayout combined with EDB to interact with a layout

.. GENERATED FROM PYTHON SOURCE LINES 7-25

.. code-block:: default




    import sys
    import os
    import pathlib
    import shutil



    local_path = os.path.abspath('')
    module_path = pathlib.Path(local_path)
    aedt_lib_path = module_path.parent.parent
    sys.path.append(os.path.join(aedt_lib_path))
    from pyaedt import generate_unique_name
    temp_folder = os.path.join(os.environ["TEMP"], generate_unique_name("Example"))
    if not os.path.exists(temp_folder): os.makedirs(temp_folder)
    print(temp_folder)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\mcapodif\AppData\Local\Temp\Example_M9GLCQ




.. GENERATED FROM PYTHON SOURCE LINES 26-27

Copying Example in Temp Folder

.. GENERATED FROM PYTHON SOURCE LINES 27-39

.. code-block:: default



    from pyaedt import Desktop
    from pyaedt import Hfss3dLayout
    from pyaedt import examples
    from pyaedt.generic.general_methods import generate_unique_name



    targetfile=examples.download_aedb()
    print(targetfile)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\mcapodif\AppData\Local\Temp\PyAEDTExamples\edb/Galileo.aedb\edb.def




.. GENERATED FROM PYTHON SOURCE LINES 40-42

Initializing Desktop
Launching HFSS 3DLayout

.. GENERATED FROM PYTHON SOURCE LINES 42-49

.. code-block:: default




    d = Desktop("2021.1")
    h3d=Hfss3dLayout(targetfile)
    h3d.save_project(os.path.join(temp_folder,"edb_demo.aedt"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Using Windows TaskManager to Load processes
    Info: Ansoft.ElectronicsDesktop.2021.1 Started with Process ID 26916
    Info: pyaedt v0.5.0 started
    Info: Started external COM connection with module pythonnet_v3
    Info: Python version 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]
    Info: Exe path: C:\Anaconda3\python.exe
    Info: Design Loaded
    Info: Successfully loaded project materials !
    Info: Materials Loaded
    Info: Analysis Loaded
    Info: Loading Modeler
    Info: Modeler Loaded
    Info: Messenger Initialized in EDB
    Info: EDB Loaded
    Info: Layers Loaded
    Info: Primitives Loaded
    Info: Modeler Loaded
    Info: Saving Galileo Project

    True



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Disable visibility for all Nets
Check Setups from setups objects

.. GENERATED FROM PYTHON SOURCE LINES 52-56

.. code-block:: default



    h3d.setups[0].props





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    OrderedDict([('DataId', 'Setup0'), ('Properties', OrderedDict([('Enable', 'true')])), ('CustomSetup', False), ('SimSetupID', 0), ('AutoSetup', False), ('SliderType', 'Balanced'), ('SolveSetupType', 'HFSS'), ('PercentRefinementPerPass', 30), ('MinNumberOfPasses', 1), ('MinNumberOfConvergedPasses', 1), ('UseDefaultLambda', True), ('UseMaxRefinement', False), ('MaxRefinement', 1000000), ('SaveAdaptiveCurrents', False), ('SaveLastAdaptiveRadFields', False), ('ProdMajVerID', -1), ('ProjDesignSetup', ''), ('ProdMinVerID', -1), ('Refine', False), ('Frequency', '10GHz'), ('LambdaRefine', True), ('MeshSizeFactor', 1.5), ('QualityRefine', True), ('MinAngle', '15deg'), ('UniformityRefine', False), ('MaxRatio', 2), ('Smooth', False), ('SmoothingPasses', 5), ('UseEdgeMesh', False), ('UseEdgeMeshAbsLength', False), ('EdgeMeshRatio', 0.1), ('EdgeMeshAbsLength', '1000mm'), ('LayerProjectThickness', '0meter'), ('UseDefeature', True), ('UseDefeatureAbsLength', False), ('DefeatureRatio', 1e-06), ('DefeatureAbsLength', '0mm'), ('InfArrayDimX', 0), ('InfArrayDimY', 0), ('InfArrayOrigX', 0), ('InfArrayOrigY', 0), ('InfArraySkew', 0), ('ViaNumSides', 6), ('ViaMaterial', 'copper'), ('Style25DVia', 'Mesh'), ('Replace3DTriangles', True), ('LayerSnapTol', '0'), ('ViaDensity', 0), ('HfssMesh', True), ('Q3dPostProc', False), ('UnitFactor', 1000), ('Verbose', False), ('NumberOfProcessors', 0), ('SmallVoidArea', 0), ('HealingOption', 1), ('InclBBoxOption', 1), ('ModelType', 0), ('AuxBlock', OrderedDict()), ('DoAdaptive', True), ('Color', ['R=0', 'G=0', 'B=0']), ('AdvancedSettings', OrderedDict([('AccuracyLevel', 2), ('GapPortCalibration', True), ('ReferenceLengthRatio', 0.25), ('RefineAreaRatio', 4), ('DRCOn', False), ('FastSolverOn', False), ('StartFastSolverAt', 3000), ('LoopTreeOn', True), ('SingularElementsOn', False), ('UseStaticPortSolver', False), ('UseThinMetalPortSolver', False), ('ComputeBothEvenAndOddCPWModes', False), ('ZeroMetalLayerThickness', 0), ('ThinDielectric', 0), ('UseShellElements', False), ('SVDHighCompression', False), ('NumProcessors', 1), ('UseHfssIterativeSolver', False), ('UseHfssMUMPSSolver', True), ('RelativeResidual', 1e-06), ('EnhancedLowFreqAccuracy', False), ('OrderBasis', -1), ('MaxDeltaZo', 2), ('UseRadBoundaryOnPorts', False), ('SetTrianglesForWavePort', False), ('MinTrianglesForWavePort', 100), ('MaxTrianglesForWavePort', 500), ('numprocessorsdistrib', 1), ('CausalMaterials', True), ('enabledsoforopti', True), ('usehfsssolvelicense', False), ('ExportAfterSolve', False), ('ExportDir', ''), ('CircuitSparamDefinition', False), ('CircuitIntegrationType', 'FFT'), ('DesignType', 'Generic'), ('MeshingMethod', 'Phi'), ('EnableDesignIntersectionCheck', True), ('UseAlternativeMeshMethodsAsFallBack', True), ('BroadbandFreqOption', 'AutoMaxFreq'), ('BroadbandMaxNumFreq', 5), ('SaveADP', False), ('UseAdvancedDCExtrap', False)])), ('CurveApproximation', OrderedDict([('ArcAngle', '30deg'), ('StartAzimuth', '0deg'), ('UseError', False), ('Error', '0meter'), ('MaxPoints', 8), ('UnionPolys', True), ('Replace3DTriangles', True)])), ('Q3D_DCSettings', OrderedDict([('SolveResOnly', True), ('Cond', OrderedDict([('MaxPass', 10), ('MinPass', 1), ('MinConvPass', 1), ('PerError', 1), ('PerRefine', 30)])), ('Mult', OrderedDict([('MaxPass', 1), ('MinPass', 1), ('MinConvPass', 1), ('PerError', 1), ('PerRefine', 30)])), ('Solution Order', 'Normal')])), ('Data', OrderedDict()), ('MeshOps', OrderedDict())])



.. GENERATED FROM PYTHON SOURCE LINES 57-58

Check Boundaries from setups objects

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: default



    h3d.boundaries





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    []



.. GENERATED FROM PYTHON SOURCE LINES 63-65

Hide all nets
#####################################

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: default


    # Enable Visibility for few nets


    h3d.modeler.primitives.change_net_visibility(visible=False)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Messenger Initialized in EDB

    True



.. GENERATED FROM PYTHON SOURCE LINES 73-74

Show only 2 nets

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default



    h3d.modeler.primitives.change_net_visibility(["A0_GPIO", "A0_MUX"], visible=True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 79-81

Show all layers
#####################################

.. GENERATED FROM PYTHON SOURCE LINES 81-92

.. code-block:: default


    # Show all the layers


    layers = h3d.modeler.layers.all_signal_layers
    for lay in layers:
        layer=h3d.modeler.layers.layers[h3d.modeler.layers.layer_id(lay)]
        layer.IsVisible = True
        layer.update_stackup_layer()









.. GENERATED FROM PYTHON SOURCE LINES 93-94

Change Layer Color

.. GENERATED FROM PYTHON SOURCE LINES 94-101

.. code-block:: default



    layer=h3d.modeler.layers.layers[h3d.modeler.layers.layer_id("TOP")]
    layer.set_layer_color(0,255,0)
    h3d.modeler.fit_all()
    h3d.modeler.model_units





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'mm'



.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default


    # Disable component visibility for TOP and BOTTOM
    # update_stackup_layer will apply modification to layout








.. GENERATED FROM PYTHON SOURCE LINES 107-109

Disable component visibility for TOP and BOTTOM
update_stackup_layer will apply modification to layout

.. GENERATED FROM PYTHON SOURCE LINES 111-120

.. code-block:: default


    top = h3d.modeler.layers.layers[h3d.modeler.layers.layer_id("TOP")]
    top.IsVisibleComponent = False
    top.update_stackup_layer()

    bot = h3d.modeler.layers.layers[h3d.modeler.layers.layer_id("BOTTOM")]
    bot.IsVisibleComponent = False
    bot.update_stackup_layer()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 121-128

.. code-block:: default


    # Fit All to visualize all


    h3d.modeler.fit_all()









.. GENERATED FROM PYTHON SOURCE LINES 129-138

.. code-block:: default


    # Enable and run the following command to close the desktop
    h3d.close_project()
    d.force_close_desktop()









.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Closing the active edb_demo AEDT Project





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  33.383 seconds)


.. _sphx_glr_download_examples_EDB_in_3DLayout.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: EDB_in_3DLayout.py <EDB_in_3DLayout.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: EDB_in_3DLayout.ipynb <EDB_in_3DLayout.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
