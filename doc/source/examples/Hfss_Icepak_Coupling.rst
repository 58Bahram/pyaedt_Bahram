
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\Hfss_Icepak_Coupling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Hfss_Icepak_Coupling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Hfss_Icepak_Coupling.py:


HFSS-Icepack Coupling Analysis
--------------------------------------------
This Example shows how to create a full project from scratch in HFSS and Icepak (linked to HFSS). the project creates
a setup, solves it and create post processing output. It includes a lot of commands to show pyaedt Capabilitiesn

.. GENERATED FROM PYTHON SOURCE LINES 8-41

.. code-block:: default




    import os
    import sys
    import pathlib
    import glob
    from IPython.display import Image

    local_path = os.path.abspath('')
    module_path = pathlib.Path(local_path)
    aedt_lib_path = module_path.parent.parent.parent
    pdf_path1 =  os.path.join(aedt_lib_path, "pyaedt", "core", "Dlls", "PDFReport")
    sys.path.append(os.path.join(module_path))
    sys.path.append(os.path.join(aedt_lib_path))
    sys.path.append(os.path.join(pdf_path1))
    from pyaedt import generate_unique_name
    project_dir = os.path.join(os.environ["TEMP"], generate_unique_name("Example"))
    if not os.path.exists(project_dir): os.makedirs(project_dir)
    print(project_dir)



    from pyaedt import Hfss
    from pyaedt import Icepak
    from pyaedt import Desktop
    import clr
    import numpy as np
    import matplotlib.pyplot as plt
    import math
    advanced = True






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\mcapodif\AppData\Local\Temp\Example_I6BSC1




.. GENERATED FROM PYTHON SOURCE LINES 42-44

Define Project Directory, AEDT Version and Project Name
Project will be run in  non Graphical Mode

.. GENERATED FROM PYTHON SOURCE LINES 44-53

.. code-block:: default




    desktopVersion = "2021.1"
    NonGraphical = True
    NewThread = False
    project_name = "Test_Jupyter_NG"
    project_file = os.path.join(project_dir, project_name + ".aedt")








.. GENERATED FROM PYTHON SOURCE LINES 54-56

Launch Electronics Desktop and Initialize HFSS app the command
Initializes the HFSS Design in AEDT. if there is a running HFSS Design the aedtapp will be linked to it, otherwise a new design will be run.

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default



    desktop=Desktop(desktopVersion, NonGraphical, NewThread)
    aedtapp = Hfss()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Using Windows TaskManager to Load processes
    Info: Ansoft.ElectronicsDesktop.2021.1 Started with Process ID 22948
    Info: pyaedt v0.5.0 started
    Info: Started external COM connection with module pythonnet_v3
    Info: Python version 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]
    Info: Exe path: C:\Anaconda3\python.exe
    Warning: No design present - inserting a new design
    Info: Added design 'HFSS_1QR' of type HFSS
    Info: Design Loaded
    Info: Successfully loaded project materials !
    Info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 62-64

Variables Settings
A variable can be initialized simpy by creating it as a list object. if user enter $ then the variable will be created for project otherwise for design.

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default



    aedtapp["$coax_dimension"] = "100mm"
    aedtapp.save_project(project_file)
    udp = aedtapp.modeler.Position(0, 0, 0)
    aedtapp["inner"] = "3mm"





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Saving Project148 Project




.. GENERATED FROM PYTHON SOURCE LINES 72-76

Modeler
Create the Coaxial, 3 Cylinders.
Parameters can be applied directly to create_cylinder method, also material can be assigned directly to the object creation action.
Alternatively the material can be assigned usign assignmaterial function

.. GENERATED FROM PYTHON SOURCE LINES 76-87

.. code-block:: default



    id1 = aedtapp.modeler.primitives.create_cylinder(aedtapp.CoordinateSystemPlane.XYPlane, udp, "inner", "$coax_dimension",
                                                     0, "inner")
    id2 = aedtapp.modeler.primitives.create_cylinder(aedtapp.CoordinateSystemPlane.XYPlane, udp, 8, "$coax_dimension",
                                                     0, matname="teflon_based")
    id3 = aedtapp.modeler.primitives.create_cylinder(aedtapp.CoordinateSystemPlane.XYPlane, udp, 10, "$coax_dimension",
                                                     0, "outer")
    aedtapp["$height"] = "150mm"
    aedtapp.assignmaterial([id1, id3], "Copper")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Assign Material copper to object inner,outer

    True



.. GENERATED FROM PYTHON SOURCE LINES 88-90

Modeler Operations
Subtract, add, etc. can be done using id of object or object name

.. GENERATED FROM PYTHON SOURCE LINES 90-95

.. code-block:: default



    aedtapp.modeler.subtract(id3, id2, True)
    aedtapp.modeler.subtract(id2, id1, True)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 96-97

Mesh Operations

.. GENERATED FROM PYTHON SOURCE LINES 97-103

.. code-block:: default



    aedtapp.mesh.assign_initial_mesh_from_slider(6)
    aedtapp.mesh.assign_model_resolution([aedtapp.modeler.primitives.get_obj_name(id1), aedtapp.modeler.primitives.get_obj_name(id3)], None)
    aedtapp.mesh.assign_length_mesh(aedtapp.modeler.primitives.get_object_faces(id2), False, 1, 2000)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <pyaedt.modules.Mesh.MeshOperation object at 0x0000021DF37EE6D0>



.. GENERATED FROM PYTHON SOURCE LINES 104-105

Automatic Excitations Creation

.. GENERATED FROM PYTHON SOURCE LINES 105-111

.. code-block:: default


    aedtapp.create_wave_port_between_objects("inner", "outer",axisdir=0, add_pec_cap=True, portname="P1")
    aedtapp.create_wave_port_between_objects("inner", "outer",axisdir=3, add_pec_cap=True, portname="P2")
    portnames = aedtapp.get_all_sources()
    aedtapp.modeler.fit_all()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Deleted 1 Objects
    Info: Deleted 1 Objects
    Info: Connection Correctly created
    Info: Assign Material pec to object inner_ObjectFromEdge1_1
    Info: Deleted 1 Objects
    Info: Deleted 1 Objects
    Info: Connection Correctly created
    Info: Assign Material pec to object inner_ObjectFromEdge2_1




.. GENERATED FROM PYTHON SOURCE LINES 112-113

Setup Generation

.. GENERATED FROM PYTHON SOURCE LINES 113-123

.. code-block:: default



    aedtapp.set_active_design(aedtapp.design_name)
    setup = aedtapp.create_setup("MySetup")
    setup.props["Frequency"] = "1GHz"
    setup.props["BasisOrder"] = 2
    setup.props["MaximumPasses"] = 1
    setup.update()
    sweepname = aedtapp.create_frequency_sweep("MySetup", "GHz", 0.8, 1.2)








.. GENERATED FROM PYTHON SOURCE LINES 124-126

ICEPAK Model Creation
Import model from HFSS

.. GENERATED FROM PYTHON SOURCE LINES 126-130

.. code-block:: default


    ipkapp = Icepak()
    ipkapp.copy_solid_bodies_from(aedtapp)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Warning: No consistent unique design present - inserting a new design
    Info: Added design 'Icepak_25G' of type Icepak
    Info: Design Loaded
    Info: Successfully loaded project materials !
    Info: Materials Loaded

    True



.. GENERATED FROM PYTHON SOURCE LINES 131-132

Import model from HFSS

.. GENERATED FROM PYTHON SOURCE LINES 132-138

.. code-block:: default



    surfaceobj = ["inner", "outer"]
    ipkapp.assign_em_losses(aedtapp.design_name, "MySetup", "LastAdaptive", "1GHz", surfaceobj, paramlist=["$coax_dimension","inner"])
    ipkapp.edit_design_settings(aedtapp.GravityDirection.ZNeg)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Mapping HFSS EM Lossess
    Info: Found 4 Objects
    Info: EM losses Mapped from design HFSS_1QR

    True



.. GENERATED FROM PYTHON SOURCE LINES 139-142

Setup Project in Icepak
When you create a setup, default settings will be applied
When you need to change a property of the setup you can use props command and pass the right value to the property value. The update function will apply the settings to the setup

.. GENERATED FROM PYTHON SOURCE LINES 142-148

.. code-block:: default



    setup_ipk = ipkapp.create_setup("SetupIPK")
    setup_ipk.props["Convergence Criteria - Max Iterations"] = 3
    setup_ipk.update()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 149-150

Mesh Settings

.. GENERATED FROM PYTHON SOURCE LINES 150-156

.. code-block:: default


    airbox = ipkapp.modeler.primitives.get_obj_id("Region")
    ipkapp.modeler.primitives[airbox].display_wireframe(True)
    airfaces = ipkapp.modeler.primitives.get_object_faces(airbox)
    ipkapp.assign_openings(airfaces)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Face List boundary_faces created
    Info: Opening Assigned

    <pyaedt.modules.Boundary.BoundaryObject object at 0x0000021DF37C86A0>



.. GENERATED FROM PYTHON SOURCE LINES 157-159

Cloase and Open Projects
This command shows how to save, close and load projects. This can be helpful in case of operations on multiple projects.

.. GENERATED FROM PYTHON SOURCE LINES 159-167

.. code-block:: default


    aedtapp.save_project()
    aedtapp.close_project(project_name)
    aedtapp.load_project(project_file)
    ipkapp = Icepak()
    ipkapp.solution_type = ipkapp.SolutionTypes.Icepak.SteadyTemperatureAndFlow
    ipkapp.modeler.fit_all()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Saving Test_Jupyter_NG Project
    Info: Closing the specified Test_Jupyter_NG AEDT Project
    Info: Design Loaded
    Info: Successfully loaded project materials !
    Info: Materials Loaded




.. GENERATED FROM PYTHON SOURCE LINES 168-171

Solve Icepak
Icepak will solve also
Solve HFSS Sweep when Icepak is finished

.. GENERATED FROM PYTHON SOURCE LINES 171-177

.. code-block:: default


    setup1 = ipkapp.analyze_setup("SetupIPK")
    aedtapp.save_project()
    aedtapp.modeler.fit_all()
    aedtapp.analyze_setup("MySetup")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Solving design setup SetupIPK
    Info: Saving Test_Jupyter_NG Project
    Info: Solving design setup MySetup

    True



.. GENERATED FROM PYTHON SOURCE LINES 178-181

Plot and Export
 Generating images and Field Plots
This section we generate Field Plots on HFSS Projects and we export it as an image

.. GENERATED FROM PYTHON SOURCE LINES 181-207

.. code-block:: default


    cutlist = ["Global:XY", "Global:XZ", "Global:YZ"]
    vollist = [aedtapp.modeler.primitives.get_obj_name(id2)]
    setup_name = "MySetup : LastAdaptive"
    quantity_name = "ComplexMag_E"
    quantity_name2 = "ComplexMag_H"
    surflist = aedtapp.modeler.primitives.get_object_faces(id1)
    intrinsic = {"Freq": "1GHz", "Phase": "0deg"}
    surflist = aedtapp.modeler.primitives.get_object_faces("outer")
    plot1 = aedtapp.post.create_fieldplot_surface(surflist, quantity_name2, setup_name, intrinsic)

    results_folder = os.path.join(aedtapp.project_path,"Coaxial_Results_NG")
    if not os.path.exists(results_folder):
        os.mkdir(results_folder)

    aedtapp.post.plot_field_from_fieldplot(plot1.name, project_path=results_folder, meshplot=False, setup_name=setup_name,
                                                 intrinsic_dict=intrinsic, imageformat="jpg", view="iso")

    import time
    start = time.time()
    cutlist = ["Global:XY"]
    phases=[str(i*5)+"deg" for i in range(18)]
    aedtapp.post.animate_fields_from_aedtplt_2(quantityname="Mag_E",object_list=cutlist,plottype="CutPlane",meshplot=False, setup_name=aedtapp.nominal_adaptive,intrinsic_dict={"Freq":"1GHz", "Phase":"0deg"},project_path=results_folder, variation_variable="Phase",variation_list=phases, off_screen=True,export_gif=True)
    endtime = time.time() - start
    print("Total Time", endtime)




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /examples/images/sphx_glr_Hfss_Icepak_Coupling_001.png
          :alt: Hfss Icepak Coupling
          :class: sphx-glr-multi-img

    *

      .. image:: /examples/images/sphx_glr_Hfss_Icepak_Coupling_002.png
          :alt: Hfss Icepak Coupling
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\mcapodif\AppData\Local\Temp\Example_I6BSC1\Coaxial_Results_NG\ComplexMag_H_C9RFY3
    Info: PyVista Generation tooks 0.5984327793121338 secs
    Field Generation, export and plot time:  1.3334321975708008
    C:\Users\mcapodif\AppData\Local\Temp\Example_I6BSC1\Coaxial_Results_NG\Mag_E_NMW63H0
    Total Time 11.420443534851074




.. GENERATED FROM PYTHON SOURCE LINES 208-210

Create Icepak Plots and export
Functions are exactly the same as seen above for HFSS. Only the Quantity is different.

.. GENERATED FROM PYTHON SOURCE LINES 210-222

.. code-block:: default



    quantity_name = "Temperature"
    setup_name = ipkapp.existing_analysis_sweeps[0]
    intrinsic = ""
    surflist = ipkapp.modeler.primitives.get_object_faces("inner")
    plot5 = ipkapp.post.create_fieldplot_surface(surflist, "SurfTemperature")

    ipkapp.post.plot_field_from_fieldplot(plot5.name, project_path=results_folder, meshplot=False, setup_name=setup_name, imageformat="jpg", view="iso")

    aedtapp.save_project()




.. image:: /examples/images/sphx_glr_Hfss_Icepak_Coupling_003.png
    :alt: Hfss Icepak Coupling
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    C:\Users\mcapodif\AppData\Local\Temp\Example_I6BSC1\Coaxial_Results_NG\SurfTemperature_JFHEQX
    Info: PyVista Generation tooks 0.07483315467834473 secs
    Field Generation, export and plot time:  0.5206074714660645
    Info: Saving Test_Jupyter_NG Project

    True



.. GENERATED FROM PYTHON SOURCE LINES 223-224

Usage of Matplotlib and Numpy to generate graph outside pyaedt

.. GENERATED FROM PYTHON SOURCE LINES 224-250

.. code-block:: default



    if advanced:
        trace_names = []
        for el in portnames:
            for el2 in portnames:
                trace_names.append('S(' + el + ',' + el2 + ')')
        cxt = ['Domain:=', 'Sweep']
        families = ['Freq:=', ['All']]
        my_data = aedtapp.post.get_report_data(expression=trace_names)
        freq_data = np.array(my_data.sweeps["Freq"])


        comp = []
        fig, ax = plt.subplots(figsize=(20, 10))

        ax.set(xlabel='Frequency (Ghz)', ylabel='SParameters(dB)', title='Scattering Chart')
        ax.grid()
        for el in trace_names:
            mag_data = np.array(my_data.data_db(el))
            ax.plot(freq_data, mag_data)
        plt.savefig(os.path.join(results_folder,project_name+".svg"))
        plt.savefig(os.path.join(results_folder,project_name+".jpg"))
        plt.show()





.. image:: /examples/images/sphx_glr_Hfss_Icepak_Coupling_004.png
    :alt: Scattering Chart
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 251-252

Close AEDT and Closed Project

.. GENERATED FROM PYTHON SOURCE LINES 252-259

.. code-block:: default



    aedtapp.close_project(aedtapp.project_name)
    desktop.force_close_desktop()







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Info: Closing the specified Test_Jupyter_NG AEDT Project





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  30.757 seconds)


.. _sphx_glr_download_examples_Hfss_Icepak_Coupling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: Hfss_Icepak_Coupling.py <Hfss_Icepak_Coupling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: Hfss_Icepak_Coupling.ipynb <Hfss_Icepak_Coupling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
